name: Build

on: [push, pull_request, workflow_dispatch]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  multi-platform-build:
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.owner.login != github.event.pull_request.base.repo.owner.login
    strategy:
      matrix:
        include:
          - { plat: ubuntu-latest, arch: x86_64 }
          - { plat: ubuntu-latest, arch: i686 }
          - { plat: ubuntu-24.04-arm, arch: aarch64 }
          - { plat: ubuntu-24.04-arm, arch: armv7l }
          # Linux emulated builds on ARM runners are slightly faster
          - { plat: ubuntu-24.04-arm, arch: riscv64, qemu: true }
          - { plat: ubuntu-24.04-arm, arch: ppc64le, qemu: true }
          # s390x: Builds fail test: "FAILED tests/test_convert.py::test_main - assert <EResult.InvalidMagicNumber:..."
          #- { plat: ubuntu-24.04-arm, arch: s390x, qemu: true }
          # macOS 13 runners are x86_64, macOS 14 and above are ARM
          - { plat: macos-latest, arch: arm64 }
          - { plat: macos-13, arch: x86_64 }
          - { plat: windows-latest, arch: AMD64 }
          - { plat: windows-11-arm, arch: ARM64 }
          # Windows 32-bit builds fail on 64-bit hosts, detecting heatshrink as incompatible 64-bit dependency
          #- { plat: windows-latest, arch: x86 }
      fail-fast: false
    name: ${{ matrix.arch }} on ${{ matrix.plat }}
    runs-on: ${{ matrix.plat }}
    steps:
    - uses: actions/checkout@v5
    # Assure PIC for all deps, otherwise it gets lost somehow for heatshrink_dynalloc, causing failures on certain Linux host and target combinations, but it is required in any case
    # - macOS: No idea how to achieve the same with native macOS sed, hence use proper GNU sed ...
    - if: startsWith(matrix.plat, 'macos-')
      run: |
        brew install gnu-sed
        gsed -i '1i\set(CMAKE_POSITION_INDEPENDENT_CODE ON)' deps/CMakeLists.txt
    - if: "!startsWith(matrix.plat, 'macos-')"
      run: sed -i '1i\set(CMAKE_POSITION_INDEPENDENT_CODE ON)' deps/CMakeLists.txt
    - uses: actions/setup-python@v5
      with:
        python-version: '3.x'
        check-latest: true
    - if: ${{ matrix.qemu }}
      uses: docker/setup-qemu-action@v3
    - run: python -m pip install cibuildwheel
    - run: python -m cibuildwheel --archs ${{ matrix.arch }} --output-dir build
      # macOS ARM: Skip Python 3.8 wheels since official Python 3.8 installers on macOS do not support ARM, causing x86_64 builds on ARM host, or tests expect x86_64 wheels when setting CMAKE_OSX_ARCHITECTURES=arm64: https://github.com/pypa/cibuildwheel/issues/2080
      # macOS x86_64: Set macOS 11.0 as target, as cbuildwheel defaults to macOS 10.9 for Python 3.8-3.11 wheels, which causes a mismatch regarding "std::uncaught_exceptions()" availability along the toolchain: https://github.com/catchorg/Catch2/issues/2779
      env:
        CIBW_SKIP: ${{ matrix.arch == 'arm64' && 'cp38-macosx*' || '' }}
        CIBW_ENVIRONMENT_MACOS: MACOSX_DEPLOYMENT_TARGET=11.0
    - run: ls -l build
    - uses: actions/upload-artifact@v4
      with:
        name: libbgcode-python-${{ matrix.plat }}-${{ matrix.arch }}
        path: build
  publish-testpypi:
    if: github.event_name == 'push' && github.ref_type == 'tag'
    needs: multi-platform-build
    runs-on: ubuntu-latest
    environment: testpypi
    permissions:
      id-token: write
    steps:
    - name: Download All Artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist
        merge-multiple: true
    - run: ls -R dist
    - uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true
        verbose: true
  publish-pypi:
    if: github.event_name == 'push' && github.ref_type == 'tag'
    needs: multi-platform-build
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write
    steps:
    - name: Download All Artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist
        merge-multiple: true
    - run: ls -R dist
    - uses: pypa/gh-action-pypi-publish@release/v1
      with:
        skip-existing: true
        verbose: true
